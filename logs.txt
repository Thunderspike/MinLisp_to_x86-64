(0) arrays - __empty__
(1) function - '(' 'define' ID (add) {} param_list  expr ')'
(2) id_list - ID (x)
(3) id_list - id_list ID (y)
(4) param_list - '(' id_list ')'


--- printing current parameter list ---

Symbol - lexeme: x, type: 1, val_origin: 2, val_index: 0
Symbol - lexeme: y, type: 1, val_origin: 2, val_index: 1
---------------------------------------


--- printing funcs available to global scope ---

funcName: add, paramCount: 2, funcReturnType: 1, isRecursive: 0, isUndefined: 0
---------------------------------------
(5) expr - '(' 'let' {} '(' assign_list ')' expr ')'
(6) expr - NUM (22)
(7) expr - NUM (20)
(8) expr - '(' '+' expr expr ')'
Left - Lex: _NUMERIC_VAL_, type: 1
Right - Lex: _NUMERIC_VAL_, type: 1
(9) expr - NUM (5)
(10) expr - ID (y)
(11) expr - '(' '-' expr ')'
(12) expr - '(' '*' expr expr ')'
(13) expr - '(' '-' expr expr ')'
(14) expr - ID (y)
(15) expr - '(' '/' expr expr ')'
(16) assign_list -  '(' a expr ')'
(17) expr - ID (a)
(18) expr - ID (x)
(19) expr - ID (y)
(20) expr - '(' '+' expr expr ')'
Left - Lex: x, type: 1
Right - Lex: y, type: 1
(21) expr - '(' '-' expr expr ')'
(22) assign_list - assign_list '(' ID (b) expr ')'
(23) expr - '(' 'let' '(' assign_list ')' {} expr ')'


--- printing scope symbols ---

Scope - name: 2, id: 2
[ { a: 1 (vo: 0, vi: 4) },  { b: 1 (vo: 0, vi: 8) },  ]
Scope - name: add, id: 1
[ { x: 1 (vo: 2, vi: 0) },  { y: 1 (vo: 2, vi: 1) },  ]
Scope - name: top, id: 0
[ ]
---------------------------------------
(24) expr - ID (b)
(25) expr - '(' 'write' expr ')'
(26) expr - '(' 'let'  '(' assign_list ')' --> expr ')'
(27) expr_list - expr
(28) expr - NUM (22)
(29) expr - NUM (20)
(30) expr - '(' '+' expr expr ')'
Left - Lex: _NUMERIC_VAL_, type: 1
Right - Lex: _NUMERIC_VAL_, type: 1
(31) expr - NUM (5)
(32) expr - ID (y)
(33) expr - '(' '-' expr ')'
(34) expr - '(' '*' expr expr ')'
(35) expr - '(' '-' expr expr ')'
(36) expr - ID (y)
(37) expr - '(' '/' expr expr ')'
(38) expr - '(' 'write' expr ')'
(39) expr_list - expr_list expr
(40) expr - ID (x)
(41) expr - ID (y)
(42) expr - '(' '-' expr expr ')'
(43) expr - '(' 'write' expr ')'
(44) expr_list - expr_list expr
(45) expr - ID (x)
(46) expr - ID (y)
(47) expr - '(' '+' expr expr ')'
Left - Lex: x, type: 1
Right - Lex: y, type: 1
(48) expr_list - expr_list expr
(49) expr - '(' 'seq' expr_list ')'


--- printing current parameter list ---

Symbol - lexeme: b, type: 1, val_origin: 1, val_index: 0
Symbol - lexeme: _DIVIDE_EXP_EXP, type: 1, val_origin: 1, val_index: 2
Symbol - lexeme: _MIN_EXP_EXP, type: 1, val_origin: 1, val_index: 1
Symbol - lexeme: _PLUS_EXP_EXP, type: 1, val_origin: 1, val_index: 3
---------------------------------------
last symbol in expr_list - lexeme: _PLUS_EXP_EXP, type: 1(50) function - '(' 'define' ID (add) --> param_list  expr ')'
	Return type from function add: 1
(51) program - function
(52) function - '(' 'define' ID (main) {} param_list  expr ')'
(53) param_list - '(' ')'
(54) expr - '(' 'let' {} '(' assign_list ')' expr ')'
(55) expr - NUM (5)
(56) expr - '(' 'write' expr ')'
(57) assign_list -  '(' a expr ')'
(58) expr - NUM (2)
(59) assign_list - assign_list '(' ID (b) expr ')'
(60) expr - '(' 'let' '(' assign_list ')' {} expr ')'


--- printing scope symbols ---

Scope - name: 4, id: 4
[ { a: 1 (vo: 0, vi: 4) },  { b: 1 (vo: 0, vi: 8) },  ]
Scope - name: main, id: 3
[ ]
Scope - name: top, id: 0
[ ]
---------------------------------------
(61) actual_list -> Îµ
(62) expr - ID (a)
(63) actual_list - actual_list expr
(64) expr - ID (b)
(65) actual_list - actual_list expr
(66) expr - '(' ID (add) actual_list ')'


--- printing current parameter list ---

Symbol - lexeme: a, type: 1, val_origin: 0, val_index: 4
Symbol - lexeme: b, type: 1, val_origin: 0, val_index: 8
---------------------------------------
(67) expr - '(' 'write' expr ')'
(68) expr - '(' 'let'  '(' assign_list ')' --> expr ')'
(69) function - '(' 'define' ID (main) --> param_list  expr ')'
	Return type from function main: 1
(70) program - program function
(71) ML - arrays program


--- printing funcs available to global scope ---

funcName: add, paramCount: 2, funcReturnType: 1, isRecursive: 0, isUndefined: 0
funcName: main, paramCount: 0, funcReturnType: 1, isRecursive: 0, isUndefined: 0
---------------------------------------


--- printing array entries list ---

---------------------------------------
